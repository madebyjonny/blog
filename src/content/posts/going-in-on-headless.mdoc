---
title: Going in on headless
created_on: 2024-01-02T15:07
summary: >-
  I believe Headless is future. In this article I will be going over the
  benefits and the drawbacks, but hopefully show that going headless won't be as
  scary as yoy might think!
category: my-thoughts
---
**Prerequisite, this isn’t aimed for sites like my own (which uses markdown files for the posts), but more your mid to large size sites. But to be honest if you're a small business now and aim to grow this may also apply to you.**

What is a headless content management system? From a user's perspective they don’t function much differently, they are still places to organise your content for your website or application. However, instead of a traditional front end, it exposes the content in the form of an API, this could be REST, GraphQL or sometimes both. So you might be thinking this might be a step back, as this means you need another codebase for your front end, and you would be right, but let’s dive into why this is actually a good thing!&nbsp;

Having the front end tightly coupled to your content management system can often be limiting. As in most cases you will have to deploy your whole application or website even if you just want to make a simple change to the front end. You may want to integrate your system into a native application, but if your CMS does not offer an API then it won’t be possible to do. It also means if you did want to migrate away from your content management system at any point it becomes a rewrite as you’re most likely locked into their system.&nbsp;

It becomes difficult to manage design systems as the technologies used by traditional CMS’s don’t support components. Meaning less reusability and standardisation of how parts of the site are constructed. It usually means full pages have to be created vs having individual components that can work in isolation and can be reused throughout the site layouts giving the content managers much more freedom. This also makes the work for the front end team and designers much more efficient as they can focus on one piece of functionality at a time. This also trickles through the team as QA have less to test at once. It also means less is being deployed at once, enabling confidence with continuous integration rather than having release cycles. (Banking may be an exception here as they will need to have audits done before things are released, but the world of banking is a different can of worms to your average website or application).

Enterprise content management systems often offer an all in one solution (the kitchen sink if you will). This could range from basic content creation features, to full on e-commerce features. It makes it easy for their sales team to pitch as most non-technical people whot won’t understand the nuances and one thing always feels easier than many smaller moving parts. I don’t want to say this is always a bad thing as many huge organisations do very well with this approach. But it does come at a price. I believe Sitecore starts in the five figure range and changes depending on the usage (as they also provide the infrastructure). This also means that these systems are quite inaccessible to the average dev as learning has to be on the job, they aren’t things you can just install locally. This has a side effect, teams are harder to hire for which makes the developers with experience specialists, therefore much more expensive (just to add to those licence fee costs).

The headless approach to enterprise would be composition, which means adding services that you require that can be managed independently of each other. I know this sounds more complex, but most teams won’t have a single person or even a team managing the whole content. If you have marketing pages chances are there will be a person or team whose responsibility it is to manage that, same with ecommerce and then same for the CRM tools. The benefit of composition is you can choose the technologies you want, for example you could use Strapi an open source CMS for content, and then make use of the Shopify Storefront API for the e-commerce side of things. This means you can choose the right service for the job, and even experiment rather than being locked into one you may find you and your team dislike.

A lot of people will say headless is more complex and I think on paper when you approach it at a surface level, it is. As you have to potentially manage multiple services to get feature parity. You have to have a separate front end and you also have to manage your own infrastructure. However, there are a lot of open source content management systems such as Strapi and Payload which have a lot of features out of the box that would be more than suitable for the average site or application. They also offer an objectively better user experience. Being open source makes them more&nbsp; accessible to developers, requiring less specialists. There is no initial cost associated with them so you can get started for free. You’re not locked into proprietary infrastructure so you can find what is the most cost effective way of hosting your content. DevOp tools have improved greatly over the years. Meaning using something like Digital Ocean’s App service or Railway is a git push away from being deployed.

NextJS (a popular front end framework you may integrate with) offers a feature called incremental static rerendering. So dynamic pages can be rendered statically. You set a revalidation time, so if content changes from the CMS the pages will be rerendered. This means these static pages can be placed on a CDN, and you can’t really get better performance. Meaning less beefy servers are required to handle the higher traffic. If you host your front end with Vercel you simply just need to hook up your repo and they take care of the rest. Nuxt and Astro are other good options as you choose which pages need to be server driven vs being rendered statically.&nbsp;

The key thing is not every backend change requires a front end change and vice versa. This means developers can work independently without the bottlenecks of each other as components can be built without needing data from the backend and can be integrated when they are ready and the same for the API’s. I feel confident in saying that a company that goes in on headless will be able to adapt to the needs of their users more effectively, without compromising the company's goals.

If you have any queries about this feel free to reach out, happy to be a sounding board if this is something you or your company is looking to do.&nbsp;
